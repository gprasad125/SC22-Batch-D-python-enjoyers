{"backend_state":"running","connection_file":"/projects/a2965908-ba18-4335-af0a-8fe3955e8e18/.local/share/jupyter/runtime/kernel-da09c44e-27e9-41ef-b665-f69faaf33afe.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"cell_type":"markdown","id":"6ee5ca","input":"### Just Some Data Cleansing\n\n","pos":-1,"type":"cell"}
{"end":1660756642758,"exec_count":77,"id":"e0690a","input":"# Import Pandas and NumPy\nimport pandas as pd\nimport numpy as np","kernel":"python3-ubuntu","pos":0,"start":1660756642749,"state":"done","type":"cell"}
{"end":1660756642770,"exec_count":78,"id":"b1919d","input":"# Reads the data into a dataframe\nmilk = pd.read_csv(\"Data/milk.csv\")","kernel":"python3-ubuntu","pos":1,"start":1660756642761,"state":"done","type":"cell"}
{"end":1660756642779,"exec_count":79,"id":"b518ac","input":"# Fix errors in column names\nmilk.rename(columns = {\"Temprature\": \"Temperature\", \"Fat \": \"Fat\", \"Colour\": \"Color\"}, inplace = True)","kernel":"python3-ubuntu","pos":4,"start":1660756642773,"state":"done","type":"cell"}
{"end":1660756642797,"exec_count":80,"id":"e18347","input":"# Prints top 5 rows\nmilk.head()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pH</th>\n      <th>Temperature</th>\n      <th>Taste</th>\n      <th>Odor</th>\n      <th>Fat</th>\n      <th>Turbidity</th>\n      <th>Color</th>\n      <th>Grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6.6</td>\n      <td>35</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>254</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6.6</td>\n      <td>36</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>253</td>\n      <td>high</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8.5</td>\n      <td>70</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>246</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9.5</td>\n      <td>34</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>255</td>\n      <td>low</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6.6</td>\n      <td>37</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>255</td>\n      <td>medium</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    pH  Temperature  Taste  Odor  Fat  Turbidity  Color   Grade\n0  6.6           35      1     0    1          0    254    high\n1  6.6           36      0     1    0          1    253    high\n2  8.5           70      1     1    1          1    246     low\n3  9.5           34      1     1    0          1    255     low\n4  6.6           37      0     0    0          0    255  medium"},"exec_count":80}},"pos":5,"scrolled":false,"start":1660756642782,"state":"done","type":"cell"}
{"end":1660756642821,"exec_count":81,"id":"52f113","input":"# Checks how many rows there are\nlen(milk)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"1059"},"exec_count":81}},"pos":6,"start":1660756642804,"state":"done","type":"cell"}
{"end":1660756642835,"exec_count":82,"id":"e189ab","input":"# Checks how many rows are high, medium, and low\nlen(milk[milk[\"Grade\"] == \"high\"])","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"256"},"exec_count":82}},"pos":7,"start":1660756642824,"state":"done","type":"cell"}
{"end":1660756642845,"exec_count":83,"id":"cfb23d","input":"len(milk[milk[\"Grade\"] == \"medium\"])","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"374"},"exec_count":83}},"pos":8,"scrolled":true,"start":1660756642837,"state":"done","type":"cell"}
{"end":1660756642856,"exec_count":84,"id":"906499","input":"len(milk[milk[\"Grade\"] == \"low\"])","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"429"},"exec_count":84}},"pos":9,"start":1660756642849,"state":"done","type":"cell"}
{"end":1660756642885,"exec_count":85,"id":"a27599","input":"# Drops null values if there are any\nmilk.dropna(inplace = True)\nmilk.reset_index(drop = True, inplace = True)","kernel":"python3-ubuntu","pos":10,"start":1660756642861,"state":"done","type":"cell"}
{"end":1660756642903,"exec_count":86,"id":"b5d42e","input":"# Looks at info of dataframe\nmilk.info()","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1059 entries, 0 to 1058\nData columns (total 8 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   pH           1059 non-null   float64\n 1   Temperature  1059 non-null   int64  \n 2   Taste        1059 non-null   int64  \n 3   Odor         1059 non-null   int64  \n 4   Fat          1059 non-null   int64  \n 5   Turbidity    1059 non-null   int64  \n 6   Color        1059 non-null   int64  \n 7   Grade        1059 non-null   object \ndtypes: float64(1), int64(6), object(1)\nmemory usage: 66.3+ KB\n"}},"pos":11,"start":1660756642888,"state":"done","type":"cell"}
{"end":1660756642912,"exec_count":87,"id":"c94506","input":"# Sets target and input\ntarget = milk[\"Grade\"]\ninput_columns = milk.drop(columns = [\"Grade\"])","kernel":"python3-ubuntu","pos":12,"start":1660756642905,"state":"done","type":"cell"}
{"end":1660756642929,"exec_count":88,"id":"e17b85","input":"# Data Split\nimport sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","kernel":"python3-ubuntu","pos":13,"start":1660756642919,"state":"done","type":"cell"}
{"end":1660756642948,"exec_count":89,"id":"b0c88d","input":"#Training data percentage\nx_train.shape[0] / milk.shape[0]","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.7998111425873465"},"exec_count":89}},"pos":14,"start":1660756642933,"state":"done","type":"cell"}
{"end":1660756642957,"exec_count":90,"id":"1ca8ed","input":"# We are going to do K Nearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier as KNN ","kernel":"python3-ubuntu","pos":15,"start":1660756642952,"state":"done","type":"cell"}
{"end":1660756642966,"exec_count":91,"id":"6a4d39","input":"# Creating the KNN model object \nmilk_KNN = KNN(n_neighbors = 7)","kernel":"python3-ubuntu","pos":16,"start":1660756642960,"state":"done","type":"cell"}
{"end":1660756642982,"exec_count":92,"id":"5f3875","input":"# Fit data\nmilk_KNN.fit(x_train, y_train)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"KNeighborsClassifier(n_neighbors=7)"},"exec_count":92}},"pos":17,"start":1660756642974,"state":"done","type":"cell"}
{"end":1660756643009,"exec_count":93,"id":"4ffdb4","input":"# Predict data\ny_hat = milk_KNN.predict(x_test)\ny_hat","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array(['low', 'low', 'medium', 'medium', 'low', 'medium', 'medium', 'low',\n       'medium', 'low', 'high', 'low', 'medium', 'medium', 'medium',\n       'medium', 'low', 'high', 'low', 'high', 'high', 'high', 'medium',\n       'low', 'medium', 'low', 'high', 'low', 'low', 'medium', 'medium',\n       'low', 'low', 'high', 'high', 'high', 'low', 'high', 'low',\n       'medium', 'low', 'low', 'high', 'low', 'medium', 'low', 'high',\n       'low', 'medium', 'low', 'low', 'low', 'low', 'medium', 'low',\n       'high', 'low', 'high', 'medium', 'medium', 'low', 'low', 'medium',\n       'medium', 'medium', 'low', 'medium', 'low', 'medium', 'high',\n       'low', 'medium', 'high', 'high', 'high', 'high', 'high', 'low',\n       'medium', 'low', 'medium', 'high', 'low', 'high', 'medium', 'low',\n       'medium', 'medium', 'high', 'low', 'low', 'medium', 'low', 'high',\n       'high', 'low', 'high', 'low', 'medium', 'medium', 'low', 'low',\n       'medium', 'high', 'high', 'high', 'medium', 'high', 'medium',\n       'high', 'low', 'high', 'low', 'medium', 'high', 'high', 'medium',\n       'low', 'high', 'low', 'low', 'high', 'low', 'medium', 'high',\n       'low', 'medium', 'low', 'high', 'medium', 'low', 'low', 'medium',\n       'medium', 'low', 'medium', 'medium', 'medium', 'low', 'high',\n       'low', 'low', 'medium', 'low', 'medium', 'low', 'high', 'high',\n       'medium', 'low', 'low', 'low', 'medium', 'medium', 'high', 'low',\n       'medium', 'low', 'low', 'low', 'medium', 'medium', 'high',\n       'medium', 'medium', 'high', 'medium', 'high', 'low', 'high',\n       'medium', 'high', 'low', 'high', 'medium', 'low', 'medium', 'high',\n       'low', 'medium', 'medium', 'high', 'medium', 'low', 'high', 'low',\n       'low', 'high', 'high', 'low', 'low', 'high', 'low', 'low', 'high',\n       'high', 'low', 'medium', 'low', 'high', 'low', 'low', 'medium',\n       'low', 'medium', 'high', 'medium', 'low', 'low', 'low', 'low',\n       'low'], dtype=object)"},"exec_count":93}},"pos":18,"start":1660756642987,"state":"done","type":"cell"}
{"end":1660756643020,"exec_count":94,"id":"908e07","input":"# Accuracy / KNN\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.9905660377358491"},"exec_count":94}},"pos":19,"start":1660756643012,"state":"done","type":"cell"}
{"end":1660756643540,"exec_count":95,"id":"184390","input":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef9adf1760>"},"exec_count":95},"1":{"data":{"image/png":"c0e77589275e7e451fe464cc468a782202131782","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":20,"start":1660756643023,"state":"done","type":"cell"}
{"end":1660756643743,"exec_count":96,"id":"f0da18","input":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nmilk_RFC = RandomForestClassifier()\nmilk_RFC.fit(x_train, y_train)\ny_hat = milk_RFC.predict(x_test)","kernel":"python3-ubuntu","pos":21,"start":1660756643546,"state":"done","type":"cell"}
{"end":1660756643766,"exec_count":97,"id":"4a8ba4","input":"# Accuracy / Random Forest\ncomparisions = np.array(y_hat == y_test)\ncomparisions.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":97}},"pos":22,"start":1660756643754,"state":"done","type":"cell"}
{"end":1660756644144,"exec_count":98,"id":"35c0b3","input":"#Confusion matrix\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef90355940>"},"exec_count":98},"1":{"data":{"image/png":"0855ae903777685303fad9be0cc5e3630627eeed","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":23,"start":1660756643770,"state":"done","type":"cell"}
{"end":1660756644756,"exec_count":100,"id":"2a7aab","input":"# Accuracy / MLP\ncomparisions = np.array(y_hat == y_test)\ncomparisions.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.7452830188679245"},"exec_count":100}},"pos":25,"start":1660756644747,"state":"done","type":"cell"}
{"end":1660756645138,"exec_count":101,"id":"c233be","input":"#Confusion matrix\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef902dd7f0>"},"exec_count":101},"1":{"data":{"image/png":"0d24008bb0bf62920871eb3bfc62525c09b49131","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":26,"scrolled":true,"start":1660756644769,"state":"done","type":"cell"}
{"end":1660756838232,"exec_count":111,"id":"4b8b82","input":"# Decision Tree Classification\nfrom sklearn import tree\nmilk_tree = tree.DecisionTreeClassifier()\nmilk_tree.fit(x_train, y_train)\ny_hat = milk_tree.predict(x_test)","kernel":"python3-ubuntu","pos":32,"start":1660756838223,"state":"done","type":"cell"}
{"end":1660756840259,"exec_count":112,"id":"4aa58f","input":"# Accuracy / Decision Tree\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.9952830188679245"},"exec_count":112}},"pos":33,"scrolled":false,"start":1660756840246,"state":"done","type":"cell"}
{"end":1660756843248,"exec_count":113,"id":"a769bf","input":"# Confusion Matrix / Decision Tree\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef8fc8bdc0>"},"exec_count":113},"1":{"data":{"image/png":"7969647eca0ca2b50983128e0ba2e12bf2bb1e06","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":34,"start":1660756842852,"state":"done","type":"cell"}
{"end":1660756893271,"exec_count":116,"id":"790dd5","input":"# Confusion Matrix / SGD\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef8fbfbdf0>"},"exec_count":116},"1":{"data":{"image/png":"654816e8c28fc30e4afc494011919b23e7065a1b","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":31,"start":1660756892867,"state":"done","type":"cell"}
{"end":1660756934974,"exec_count":127,"id":"5400b8","input":"# SGD Classifier\nfrom sklearn.linear_model import SGDClassifier\nmilk_SGD = SGDClassifier(loss=\"hinge\", penalty=\"l2\", max_iter=500)\nmilk_SGD.fit(x_train, y_train)\ny_hat = milk_SGD.predict(x_test)","kernel":"python3-ubuntu","pos":29,"start":1660756934952,"state":"done","type":"cell"}
{"end":1660756936381,"exec_count":128,"id":"7408a3","input":"# Accuracy / SGD\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.5330188679245284"},"exec_count":128}},"pos":30,"start":1660756936377,"state":"done","type":"cell"}
{"end":1660758368598,"exec_count":143,"id":"7016a8","input":"#F1 Score / SGD\nfrom sklearn.metrics import f1_score\ny_pred = y_hat\ny_true = y_test\n#f1_score(y_true, y_pred, average='macro')\nf1_score(y_true, y_pred, average='micro')\n#f1_score(y_true, y_pred, average='weighted')\n","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.7877358490566037"},"exec_count":143}},"pos":30.75,"start":1660758368592,"state":"done","type":"cell"}
{"end":1660758733281,"exec_count":144,"id":"2b8ea4","input":"# Gaussian Naive Bayes Classification\nfrom sklearn.naive_bayes import GaussianNB\nmilk_GNB = GaussianNB()\nmilk_GNB.fit(x_train, y_train)\ny_hat = milk_GNB.predict(x_test)","kernel":"python3-ubuntu","pos":35,"start":1660758733271,"state":"done","type":"cell"}
{"end":1660758735179,"exec_count":145,"id":"c39b2d","input":"# Accuracy / GNB\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.9339622641509434"},"exec_count":145}},"pos":36,"start":1660758735159,"state":"done","type":"cell"}
{"end":1660758738703,"exec_count":146,"id":"a2910e","input":"# Confusion Matrix / GNB\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef8fb3a2b0>"},"exec_count":146},"1":{"data":{"image/png":"1e1c3448f57296ff7f96c847aa43bdbcc422d78f","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":37,"start":1660758738246,"state":"done","type":"cell"}
{"end":1660758983528,"exec_count":148,"id":"5f3b34","input":"#Confusion Chart / GPK\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef8f9623a0>"},"exec_count":148},"1":{"data":{"image/png":"1e1c3448f57296ff7f96c847aa43bdbcc422d78f","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":40,"start":1660758983137,"state":"done","type":"cell"}
{"end":1660760622158,"exec_count":154,"id":"a9d6d1","input":"optimizer.best_params_","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"{'C': 1.3, 'degree': 1, 'kernel': 'linear'}"},"exec_count":154}},"pos":28.21875,"start":1660760622146,"state":"done","type":"cell"}
{"end":1660760709418,"exec_count":156,"id":"a419dc","input":"# Support Vector Machine Classification\nfrom sklearn.svm import SVC\nfrom sklearn import svm\nmilk_SVM = svm.SVC(C= 1.3, degree= 1, kernel= 'linear')\nmilk_SVM.fit(x_train, y_train)\ny_hat = milk_SVM.predict(x_test)","kernel":"python3-ubuntu","pos":28,"start":1660760709354,"state":"done","type":"cell"}
{"end":1660760716602,"exec_count":157,"id":"d96697","input":"# Accuracy / SVM\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.8632075471698113"},"exec_count":157}},"pos":28.25,"start":1660760716597,"state":"done","type":"cell"}
{"end":1660760719947,"exec_count":158,"id":"77e011","input":"# Confusion Matrix / SVM\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fef8f8de340>"},"exec_count":158},"1":{"data":{"image/png":"030cf60e4567e1276057f63b805108d706e721d3","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":638},"needs_background":"light"}}},"pos":28.375,"scrolled":true,"start":1660760719457,"state":"done","type":"cell"}
{"exec_count":131,"id":"ae6d8b","input":"from sklearn.neural_network import MLPClassifier\nmilk_mlp = MLPClassifier()\nmilk_mlp.fit(x_train, y_train)\ny_hat = milk_mlp.predict(x_test)","kernel":"python3-ubuntu","pos":28.5,"state":"done","type":"cell"}
{"exec_count":135,"id":"a581d8","input":"# Accuracy Score / SGD\nfrom sklearn.metrics import accuracy_score\ny_pred = y_hat\ny_true = y_test\naccuracy_score(y_true, y_pred)\n","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.7877358490566038"},"exec_count":135}},"pos":30.5,"state":"done","type":"cell"}
{"exec_count":147,"id":"d2d01b","input":"#Accuracy / GPK\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.9339622641509434"},"exec_count":147}},"pos":39,"state":"done","type":"cell"}
{"exec_count":149,"id":"7cf92e","input":"from sklearn.model_selection import GridSearchCV\n#parameters = {\n    \"C\": [0.5, 0.7, 0.9, 1.1, 1.3],\n    \"degree\": [1, 2, 4, 10, 12],\n    \"kernel\": [\"linear\", \"sigmoid\", \"poly\"]\n}\n\n#optimizer = GridSearchCV(SVC(), param_grid = parameters, verbose = 2)\n#optimizer.fit(x_train, y_train)","kernel":"python3-ubuntu","pos":28.125,"state":"done","type":"cell"}
{"exec_count":99,"id":"41ea5f","input":"# MLP Classifier\nfrom sklearn.neural_network import MLPClassifier\nmilk_mlp = MLPClassifier()\nmilk_mlp.fit(x_train, y_train)\ny_hat = milk_mlp.predict(x_test)","kernel":"python3-ubuntu","pos":24,"state":"done","type":"cell"}
{"id":"64c8b6","input":"#","pos":41,"type":"cell"}
{"id":"66763f","input":"# Confusion Matrix / MLP\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","pos":28.875,"type":"cell"}
{"id":"9fdffa","input":"#Gaussian Process Kernel\nfrom sklearn.gaussian_process.kernels import ConstantKernel\nmilk_CK = ConstantKernel()\nmilk_CK.fit(x_train, y_train)\ny_hat = milk_CK.predict(x_test)","pos":38,"type":"cell"}
{"id":"a86490","input":"# Accuracy / MLP\ncomparisons = np.array(y_hat == y_test)\ncomparisons.mean()","pos":28.75,"type":"cell"}
{"id":0,"time":1660760679641,"type":"user"}
{"last_load":1660747807925,"type":"file"}